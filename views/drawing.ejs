<!doctype html>
<html>
<head>
  <title><%= title %></title>

  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>

  <link rel="stylesheet" href="/dist/leaflet.css"/>
  <link rel="stylesheet" href="/dist/leaflet.draw.css"/>

  <!--[if lte IE 8]>
  <link rel="stylesheet" href="/dist/leaflet.ie.css"/>
  <link rel="stylesheet" href="/dist/leaflet.draw.ie.css"/>
  <![endif]-->

  <script src="/dist/leaflet-src.js"></script>
  <script src="/dist/leaflet.draw-src.js"></script>

  <% if ( agent.indexOf( 'Mobile' ) > 0 ) {%>
  <script src="/dist/cordova-2.3.0.js"></script>
  <% } else { %>
  <% } %>
</head>
<body>
  <div id="map" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></div>
  <script src="/browserify?libs=branding,io,util"></script>
  <script>
    var b = require( 'branding' );
    var u = require( 'util' );
    var i = require( 'socket.io' );
  </script>
  <script>
    var a = "http://emap.dse.vic.gov.au/ArcGIS/rest/services/mapscape/MapServer/tile";
    var b = "http://devgeocortex01.fire.dse.vic.gov.au/ArcGIS/rest/services/mapscape/MapServer/tile";
    var c = "http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/";

    var f = '/{z}/{x}/{y}.png';
    var g = '/{z}/{y}/{x}.png';

    var map = L.map( 'map', { attributionControl: false } ).setView( [-37.8, 144.9], 7 );

    var underlays = {
      "arcgis": L.tileLayer( c + g, { maxZoom: 18 } ).addTo( map )
    };

    var overlays = {
      "drawing": L.featureGroup().addTo( map )
    };

    L.control.layers( underlays, overlays ).addTo( map );

    L.control.draw = function ( options ) {
      return new L.Control.Draw( options );
    };
    L.control.draw( {
      position: 'topleft',
      edit: {
        featureGroup: overlays["drawing"]
      }
    } ).addTo( map );


    var feature = i.connect( "http://" + document.location.hostname + "/feature", { transports: ['websocket'] } );
    feature.on( 'created', function ( data ) {
      console.log( u.inspect( data ) );
      if ( data.geometry.type == 'Point' ) {
        toMarker( data );
      }
      else if ( data.geometry.type == 'Polygon' ) {
        toPolygon( data );
      }
      else if ( data.geometry.type == 'Polyline' ) {
        toPolyline( data );
      }
    } );
    feature.on( 'edited', function ( data ) {
      console.log( u.inspect( data ) );
      if ( data.geometry.type == 'Point' ) {
        overlays["drawing"].addLayer( toMarker( data ) );
      }
      else if ( data.geometry.type == 'Polygon' ) {
        overlays["drawing"].addLayer( toPolygon( data ) );
      }
      else if ( data.geometry.type == 'Polyline' ) {
        overlays["drawing"].addLayer( toPolyline( data ) );
      }
    } );
    feature.on( 'deleted', function ( data ) {
      console.log( u.inspect( data ) );
    } );

    var toPolygon = function ( json ) {
      console.log( u.inspect( json ) );
      var coords = _.map( json.geometry.coordinates[0], function ( value ) {
        return [value[1], value[0]];
      } );
      return new L.Polygon( coords, json.properties.options );
    }
    var fromPolygon = function ( polygon ) {
      var coords = _.map( polygon.getLatLngs(), function ( value ) {
        return [value.lng, value.lat];
      } );
      json = {
        type: "Feature",
        properties: {
          options: polygon.options
        },
        geometry: {
          type: 'Polygon',
          coordinates: [coords]
        }
      };
      return json;
    };
    var toPolyline = function ( json ) {
      var coords = _.map( json.geometry.coordinates, function ( value ) {
        return [value[1], value[0]];
      } );
       new L.Polyline( coords, json.properties.options );
    }
    var fromPolyline = function ( polyline ) {
      var coords = _.map( polyline.getLatLngs(), function ( value ) {
        return [value.lng, value.lat];
      } );
      json = {
        type: "Feature",
        properties: {
          options: polyline.options
        },
        geometry: {
          type: "Polyline",
          coordinates: coords
        }
      };
      return json;
    };
    var toMarker = function ( json ) {
      return new L.Marker( [
        json.geometry.coordinates[1],
        json.geometry.coordinates[0]
      ], json.properties.options );
    }
    var fromMarker = function ( marker ) {
      return {
        type: "Feature",
        properties: {
          options: marker.options
        },
        geometry: {
          type: "Point",
          coordinates: [
            marker.getLatLng().lng,
            marker.getLatLng().lat
          ]
        }
      };
    }

    map.on( 'draw:created', function ( e ) {
      console.log( "draw:created " + u.inspect( e ) );
      var type = e.layerType,
          layer = e.layer;
      layer.options.title = prompt( "Title" )

      layer.options.meta = {
        title: layer.options.title,
        shape: e.layerType
      }


      if ( type === 'marker' ) {
        feature.emit( 'created', fromMarker( layer ), function ( data ) {
          layer.options.id = data
        } );
      }
      else if ( type == 'polygon' ) {
        feature.emit( 'created', fromPolygon( layer ), function ( data ) {
          layer.options.id = data
        } );
      }
      else if ( type == 'polyline' ) {
        feature.emit( 'created', fromPolyline( layer ), function ( data ) {
          layer.options.id = data
        } );
      }
      overlays["drawing"].addLayer( layer );
    } );
    map.on( 'draw:edited', function ( e ) {
      console.log( "draw:edited " + u.inspect( e ) );
      _.each( e.layers, function ( layer ) {
        //var type = e.layerType;
        if ( typeof layer === L.Marker ) {
          feature.emit( 'edited', fromMarker( layer ) );
        }
        else if ( type == 'polygon' ) {
          feature.emit( 'edited', fromPolygon( layer ) );
        }
        else if ( type == 'polyline' ) {
          feature.emit( 'edited', fromPolyline( layer ) );
        }

      } );
    } );
    map.on( 'draw:deleted', function ( e ) {
      console.log( "draw:deleted " + u.inspect( e ) );
      var type = e.layerType,
          layer = e.layer;
      if ( type === 'marker' ) {
        feature.emit( 'deleted', fromMarker( layer ) );
      }
      else if ( type == 'polygon' ) {
        feature.emit( 'deleted', fromPolygon( layer ) );
      }
      else if ( type == 'polyline' ) {
        feature.emit( 'deleted', fromPolyline( layer ) );
      }
    } );
  </script>
</body>
</html>
